@page "/test"
@page "/test/{SessionId:guid}"
@using System.Timers
@using Emata.Shared.ViewModels
@using Emata.UI.Services
@inject ISessionService TestService
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="container mt-3">
    @if (_loading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading test questions...</p>
        </div>
    }
    else if (_session != null)
    {
        <div class="mb-4 d-flex justify-content-between align-items-center">
            <h2>Aptitude Test</h2>
            <div class="timer @(_timeRemaining.TotalMinutes < 5 ? "text-danger" : "")">
                Time Remaining: @_timeRemaining.ToString(@"hh\:mm\:ss")
            </div>
        </div>

        <div class="progress mb-4">
            <div class="progress-bar" role="progressbar"
            style="width: @((_timeRemaining.TotalSeconds / 1800) * 100)%"
            aria-valuenow="@((_timeRemaining.TotalSeconds / 1800) * 100)"
            aria-valuemin="0"
            aria-valuemax="100">
            </div>
        </div>

        @if (_currentQuestionIndex < _session.Questions.Count)
        {
            var question = _session.Questions[_currentQuestionIndex];

            <div class="question-container">
                <h4>Question @(_currentQuestionIndex + 1) of @_session.Questions.Count</h4>
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">@question.Text</h5>

                        <div class="options-list mt-4">
                            @for (int i = 0; i < question.Options.Count; i++)
                            {
                                var optionIndex = i;
                                <div class="form-check mb-2">
                                    <input class="form-check-input"
                                    type="radio"
                                    name="question@(question.Id)"
                                    id="option@(question.Id)_@(i)"
                                    checked="@(question.SelectedOptionIndex == optionIndex)"
                                    @onchange="() => SelectOption(question.Id, optionIndex)" />
                                    <label class="form-check-label" for="option@(question.Id)_@(i)">
                                        @question.Options[i]
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button class="btn btn-secondary"
                    @onclick="PreviousQuestion"
                    disabled="@(_currentQuestionIndex == 0)">
                        Previous
                    </button>

                    <button class="btn btn-primary"
                    @onclick="NextQuestion"
                    disabled="@(_currentQuestionIndex == _session.Questions.Count - 1)">
                        Next
                    </button>
                </div>
            </div>
        }

        <div class="mt-4 text-center">
            <button class="btn btn-success btn-lg" @onclick="FinishTest">Submit Test</button>
        </div>

        <div class="mt-4">
            <div class="question-nav d-flex justify-content-center">
                @for (int i = 0; i < _session.Questions.Count; i++)
                {
                    var index = i;
                    var question = _session.Questions[i];
                    var btnClass = _currentQuestionIndex == i
                    ? "btn-primary"
                    : question.SelectedOptionIndex.HasValue
                    ? "btn-success"
                    : "btn-outline-secondary";

                    <button class="btn @btnClass mx-1" @onclick="() => GoToQuestion(index)">
                        @(i + 1)
                    </button>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid? SessionId { get; set; }
    private bool _loading = true;
    private TestSessionDTO? _session;
    private int _currentQuestionIndex = 0;
    private TimeSpan _timeRemaining = TimeSpan.FromMinutes(30);
    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        if (SessionId.HasValue)
        {
            _session = await TestService.GetSessionAsync(SessionId.Value);
        }
        else
        {
            _session = await TestService.StartTestAsync();
        }
        

        if (_session != null)
        {
            _timeRemaining = _session.EndTime - DateTime.UtcNow;

            // Initialize timer
            _timer = new Timer(1000);
            _timer.Elapsed += TimerElapsed;
            _timer.Start();

            // Update questions with any saved answers
            foreach (var questionId in _session.UserAnswers.Keys)
            {
                var question = _session.Questions.FirstOrDefault(q => q.Id == questionId);
                if (question != null)
                {
                    question.SelectedOptionIndex = _session.UserAnswers[questionId];
                }
            }
        }

        _loading = false;
    }

    private void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            if (_session != null)
            {
                _timeRemaining = _session.EndTime - DateTime.UtcNow;

                if (_timeRemaining.TotalSeconds <= 0)
                {
                    await FinishTest();
                }
                else
                {
                    StateHasChanged();
                }
            }
        });
    }

    private async Task SelectOption(Guid questionId, int optionIndex)
    {
        if (_session == null) return;

        var question = _session.Questions.FirstOrDefault(q => q.Id == questionId);
        if (question != null)
        {
            question.SelectedOptionIndex = optionIndex;

            // Save answer to server
            await TestService.SubmitAnswerAsync(_session.Id, questionId, optionIndex);
        }
    }

    private void PreviousQuestion()
    {
        if (_currentQuestionIndex > 0)
        {
            _currentQuestionIndex--;
        }
    }

    private void NextQuestion()
    {
        if (_session != null && _currentQuestionIndex < _session?.Questions?.Count - 1)
        {
            _currentQuestionIndex++;
        }
    }

    private void GoToQuestion(int index)
    {
        _currentQuestionIndex = index;
    }

    private async Task FinishTest()
    {
        if (_session == null) return;

        _timer?.Stop();

        var result = await TestService.FinishTestAsync(_session.Id);

        if (result != null)
        {
            NavigationManager.NavigateTo($"/result/{_session.Id}");
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}

