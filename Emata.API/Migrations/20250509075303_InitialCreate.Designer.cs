// <auto-generated />
using System;
using Emata.API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Emata.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250509075303_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Emata.API.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CorrectOptionIndex")
                        .HasColumnType("integer");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0b423bf-d15f-4dee-b321-6eed79de9049"),
                            Category = "Programming",
                            CorrectOptionIndex = 4,
                            DifficultyLevel = "Medium",
                            Options = "int;float;char;string;variant",
                            Text = "Which of the following is not a valid C# data type?"
                        },
                        new
                        {
                            Id = new Guid("b31f62f5-bba8-4582-b19b-1400d90efbdd"),
                            Category = "Mathematics",
                            CorrectOptionIndex = 1,
                            DifficultyLevel = "Hard",
                            Options = "12;19;24;14;None of the above",
                            Text = "What is the result of 5 + 7 * 2?"
                        },
                        new
                        {
                            Id = new Guid("d72e0d79-ee81-4989-82c8-b1fd322597eb"),
                            Category = "Programming",
                            CorrectOptionIndex = 3,
                            DifficultyLevel = "Medium",
                            Options = "Angular;React;Vue;Laravel;Svelte",
                            Text = "Which of these is not a JavaScript framework?"
                        },
                        new
                        {
                            Id = new Guid("6f9d50a7-d740-4d92-8ee9-7a4d4e05351e"),
                            Category = "Geography",
                            CorrectOptionIndex = 2,
                            DifficultyLevel = "Hard",
                            Options = "London;Berlin;Paris;Madrid;Rome",
                            Text = "What is the capital of France?"
                        },
                        new
                        {
                            Id = new Guid("cce917bd-c030-4281-9538-7bd8a88440e5"),
                            Category = "Database",
                            CorrectOptionIndex = 2,
                            DifficultyLevel = "Easy",
                            Options = "It can contain NULL values;It can have duplicate values;It uniquely identifies each record in a table;It can be modified easily;It allows multiple columns with the same name",
                            Text = "Which of the following is a primary key constraint in SQL?"
                        },
                        new
                        {
                            Id = new Guid("53f6a56b-e80b-4992-8168-0e14710e6c6d"),
                            Category = "Networking",
                            CorrectOptionIndex = 0,
                            DifficultyLevel = "Hard",
                            Options = "Hypertext Transfer Protocol;Hypertext Test Protocol;Hyper Transfer Text Protocol;High Transfer Text Protocol;Hypertext Transfer Procedure",
                            Text = "What does HTTP stand for?"
                        },
                        new
                        {
                            Id = new Guid("3a049314-b09a-411d-ba3d-b71a989444d6"),
                            Category = "Algorithms",
                            CorrectOptionIndex = 4,
                            DifficultyLevel = "Easy",
                            Options = "O(1);O(log n);O(n);O(n log n);O(n²)",
                            Text = "Which Big O notation represents the worst performance?"
                        },
                        new
                        {
                            Id = new Guid("cc4f86fe-9789-49fc-9fe5-ebf73485f315"),
                            Category = "Programming",
                            CorrectOptionIndex = 2,
                            DifficultyLevel = "Medium",
                            Options = "if (x > y) {};if x > y {};if x > y:;if (x > y):;if x > y then",
                            Text = "What is the correct syntax for an if statement in Python?"
                        },
                        new
                        {
                            Id = new Guid("2d9dd2d0-25ce-47b4-9a2c-c6adb9024b61"),
                            Category = "Data Structures",
                            CorrectOptionIndex = 1,
                            DifficultyLevel = "Medium",
                            Options = "Queue;Stack;Linked List;Tree;Graph",
                            Text = "Which data structure operates on a LIFO principle?"
                        },
                        new
                        {
                            Id = new Guid("fa17bb2c-b9ff-4b79-891b-3c4a969ef116"),
                            Category = "Mathematics",
                            CorrectOptionIndex = 0,
                            DifficultyLevel = "Hard",
                            Options = "11;20;14;5;None of the above",
                            Text = "What is the result of 3 + 2 * 4?"
                        });
                });

            modelBuilder.Entity("Emata.API.Models.TestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("integer");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("TimeTaken")
                        .HasColumnType("interval");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("Emata.API.Models.TestSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAnswersJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestSessions");
                });

            modelBuilder.Entity("Emata.API.Models.TestSessionQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SessionId");

                    b.ToTable("TestSessionQuestions");
                });

            modelBuilder.Entity("Emata.API.Models.TestResult", b =>
                {
                    b.HasOne("Emata.API.Models.TestSession", "Session")
                        .WithOne()
                        .HasForeignKey("Emata.API.Models.TestResult", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Emata.API.Models.TestSessionQuestion", b =>
                {
                    b.HasOne("Emata.API.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emata.API.Models.TestSession", "Session")
                        .WithMany("SessionQuestions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Emata.API.Models.TestSession", b =>
                {
                    b.Navigation("SessionQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
